schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Query {
  node(id: ID!): Node
  products: [Product!]!
  product(id: ID!): Product!
  brands: [Brand!]!
  brand(id: ID!): Brand!
  categories: [Category!]!
  category(id: ID!): Category!
  users: [User!]!
}

type Mutation {
  addProduct(input: AddProductInput!): AddProductPayload!
  addBrand(input: AddBrandInput!): AddBrandPayload!
  addCategory(input: AddCategoryInput!): AddCategoryPayload!
  login(input: LoginInput!): LoginPayload!
}

type Subscription {
  onProductCreated: Product!
}

type Product implements Node {
  id: ID!
  Brand: Brand
  Category: Category
  name: String
  description: String
  uOM: String
  status: String
  brandId: Int!
  categoryId: Int!
  suplierProducts: [SupplierProduct!]!
}

type Brand implements Node {
  id: ID!
  Products: [Product]
  name: String
}

type Category implements Node {
  id: ID!
  Products: [Product]
  name: String
}

type User {
  userName: String
  id: Int!
  password: String
  email: String
  phone: String
}

"The node interface is implemented by entities that have a global unique identifier."
interface Node {
  id: ID!
}

enum ApplyPolicy {
  BEFORE_RESOLVER
  AFTER_RESOLVER
}

type SupplierProduct {
  id: Int!
  supplierId: Int!
  supplier: Supplier
  productId: Int!
  product: Product
}

type Supplier {
  id: Int!
  name: String
  address: String
  phone: String
  contact: String
  email: String
  comments: String
  supplierProducts: [SupplierProduct!]!
}

input LoginInput {
  email: String
  password: String
}

type LoginPayload {
  login: String
  errors: [UserError!]
}

input AddCategoryInput {
  name: String
}

type AddCategoryPayload {
  category: Category
  errors: [UserError!]
}

input AddBrandInput {
  name: String
}

type AddBrandPayload {
  brand: Brand
  errors: [UserError!]
}

input AddProductInput {
  name: String!
  description: String
  uom: String
  status: String
  brandId: Int!
  categoryId: Int!
}

type AddProductPayload {
  product: Product
  errors: [UserError!]
}

type UserError {
  message: String!
  code: String!
}

directive @authorize("The name of the authorization policy that determines access to the annotated resource." policy: String "Roles that are allowed to access the annotated resource." roles: [String!] "Defines when when the resolver shall be executed.By default the resolver is executed after the policy has determined that the current user is allowed to access the field." apply: ApplyPolicy! = BEFORE_RESOLVER) repeatable on SCHEMA | OBJECT | FIELD_DEFINITION